.data 
FreqTable: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
enterArraySize: .asciiz "Please enter the array size: "
warningPositive: .asciiz "Please only enter positive elements!!!\n"
enterArrayElem: .asciiz "Please enter array elements: "
doNotNegativeNumber: .asciiz "Enter only positive numbers!!!"
newLine: .asciiz "\n"
space: .asciiz " "

.text

main:

jal CreateArray

jal InitializeArray

move $s0, $v1 #$s0 = array size 
move $s1, $v0 #$s1 = beginning array address = head pointer

la $a0, newLine
li $v0, 4 #print string
syscall

move $a0, $s0 #$a0 = array size
move $a1, $s1 #$a1 = beginning array address = head pointer

la $a2, FreqTable #$a2 = FreqTable 

jal FindFreq

jal printFreqTable


exit:
li $v0, 10
syscall

CreateArray:

la $a0, enterArraySize  #"Please enter the array size: "
li $v0, 4 #print string
syscall

li $v0, 5 #read integer from the user      
syscall 
move $s0, $v0 #$s0 = array size

mul $a0, $s0, 4 #kac byte'lik array size'a ihtiyacimiz oldugunu soyluyo
li $v0, 9 #allocate heap memory #$a0 = number of bytes to allocate #$v0 contains address of allocated memory
syscall 
move $s1, $v0	# s1 = head pointer of the array / first element's address

la $a0, warningPositive #"Please only enter positive elements!!!\n"
li $v0, 4 #print string
syscall

jr $ra

InitializeArray: 
li $t0, 0 #$t0 = element counter
move $t1, $s1 #$t1 = byte counter

	loop: beq $t0, $s0, printArrayContents
	
	la $a0, enterArrayElem #"Please enter array elements: "
	li $v0, 4 #print string
	syscall

	li $v0, 5 #gets the integer from the user 
	syscall
	
	blt $v0, 0, negativeNumber 
	
	sw $v0, 0($t1) #store contents of $v0 into effective memory address that is $t1 #memory write 
	
	addi $t0, $t0, 1 #increment element counter
	addi $t1, $t1, 4 #increment byte counter
	
	j loop 

	printArrayContents:
	li $t0,0 #$t0 = element counter
	move $t1, $s1 #$t1 = byte counter
	
	loop2: beq $t0, $s0, done
	
	lw $a0, 0($t1) #memory read 	
	li $v0, 1 #print integer
	syscall 
	
	la $a0, space
	li $v0, 4
	syscall
		
	addi $t0, $t0, 1 #increment element counter
	addi $t1, $t1, 4 #increment byte counter
		
	j loop2

	negativeNumber:
	la $a0, doNotNegativeNumber 
	li $v0, 4 #print string
	syscall
	
	li $v0, 10
	syscall
	
done:	
move $v0, $s1  #$s1 = $v0 = array address = head pointer
move $v1, $s0  #$s0 = $v0 = array size 	
jr $ra

#a0 : size  # a1 : head pointer 

FindFreq:	
move $t0 ,$a2 #$a2 = $t0 = beginning address of FreqTable = byte counter
move $t1, $a1 #$t1 = beginning address of the array
li $t2, 0 #index counter


	loop3: beq $t2, 11, exitLoop3
	
	lw $t3, 0($t1) #memory read, t3 has the element of the number 
	
	beq $t3, 0, incrementZeroth
	beq $t3, 1, incrementFirst
	beq $t3, 2, incrementSecond
	beq $t3, 3, incrementThird
	beq $t3, 4, incrementFourth
	beq $t3, 5, incrementFifth
	beq $t3, 6, incrementSixth
	beq $t3, 7, incrementSeventh
	beq $t3, 8, incrementEighth
	beq $t3, 9, incrementNineth
	bgt $t3, 9, incrementTenth
	
	
	j loop3

incrementZeroth:
lw $t4, 0 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,0($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter

j loop3

incrementFirst:
lw $t4, 4 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,4($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementSecond:
lw $t4, 8($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,8($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementThird:
lw $t4, 12 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,12($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementFourth:
lw $t4, 16 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,16($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementFifth:
lw $t4, 20 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,20($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementSixth:
lw $t4, 24 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,24($t0) #memory write = $t4 has the frequency 

j loop3

incrementSeventh:
lw $t4, 28 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,28($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementEighth:
lw $t4, 32 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,32($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementNineth:
lw $t4, 36 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,36($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

incrementTenth:
lw $t4, 40 ($t0)  #read the element
addi $t4, $t4, 1 #increment
sw $t4 ,40($t0) #memory write = $t4 has the frequency 

addi $t2, $t2, 1 #increment size counter
addi $t1, $t1, 4 #increment byte counter
j loop3

exitLoop3:
jr $ra

printFreqTable:
li $t5, 0 #size counter
move $t6, $a2  #byte counter

	printLoop: beq $t5, 11, exitLoop

	lw $a0, 0($t6) #memory read
	li $v0, 1 #integer read
	syscall
	
	la $a0, space 
	li $v0, 4 #print string
	syscall 

	addi $t5, $t5, 1 #increment size counter
	addi $t6, $t6, 4 #increment byte counter

	j printLoop

exitLoop: 
jr $ra

